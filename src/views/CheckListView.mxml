<?xml version="1.0" encoding="utf-8"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark"  title="Is It Up?"
		contentCreationComplete="view1_contentCreationCompleteHandler(event)"
		dataChange="view1_dataChangeHandler(event)">
	
	<fx:Script>
		<![CDATA[
			import mx.collections.IList;
			import mx.events.FlexEvent;
			import mx.rpc.AsyncToken;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.rpc.http.HTTPService;
			
			[Bindable]
			public var mainDataXML:XML;
			
			[Bindable]
			public var dataList:IList;
			
			
			public var urlCount:int = 0;
			
			
			protected function btnRefreshList_clickHandler(event:MouseEvent):void
			{
				imgBusy.visible = true;				
				urlCount = mainDataXML.url.length();
				
				for(var i:int = 0; i < mainDataXML.url.length(); i++) {
					var url:String = mainDataXML.url[i].address.toString();
					
					var my_date:Date = new Date();
					
					var service:HTTPService = new HTTPService();
					service.url = url;
					service.resultFormat = "text";
					service.requestTimeout = 5;
					var token:AsyncToken = service.send();
					// set custome token props.
					token.url = url;
					token.time = my_date.time;
					token.addResponder(new mx.rpc.Responder(result, fault));
				}		
				
				// reset that list
				mainDataXML = null;
				mainDataXML = <urlList></urlList>;
				
			}
			
			protected function fault(event:FaultEvent):void
			{
				trace("Fault- Event: " + event + " token url: " + event.token.url);
				
				var my_date:Date = new Date();
				
				// stuff for XML:
				var timeResp:String = (my_date.time - event.token.time).toString() + " milliseconds";
				var code:String = event.statusCode.toString();
				var timeNow:String = my_date.time.toString();
				var url:String = event.token.url;
				
				var newNode:XML = <url></url>;
				
				newNode.address = url;
				newNode.last = code;
				newNode.time = timeNow;
				newNode.latency = timeResp;
				
				mainDataXML.appendChild(newNode);
				
				updateList();
				
				lblCurrentCount.text =  mainDataXML.url.length();
				if(urlCount == mainDataXML.url.length()) 
					imgBusy.visible = false;
			}
			
			protected function result(event:ResultEvent):void
			{
				trace("Result- Event: " + event + " token url: " + event.token.url);
				
				var my_date:Date = new Date();
				
				// stuff for XML:
				var timeResp:String = (my_date.time - event.token.time).toString() + " milliseconds";
				var code:String = event.statusCode.toString();
				var timeNow:String = my_date.time.toString();
				var url:String = event.token.url;
				
				var newNode:XML = <url></url>;
				
				newNode.address = url;
				newNode.last = code;
				newNode.time = timeNow;
				newNode.latency = timeResp;
				
				mainDataXML.appendChild(newNode);
				
				updateList();
				
				lblCurrentCount.text =  mainDataXML.url.length();
				if(urlCount == mainDataXML.url.length()) 
					imgBusy.visible = false;
			}
			
			protected function updateList():void {
				if(dataList != null) 
					dataList.removeAll();
				
				var arrListContents:Array = [];
				for(var i:int = 0; i < mainDataXML.url.length(); i++ ) {
					var thisXML:XML = mainDataXML.url[i];
					var dispStr:String = thisXML.last.toString() + " | " + thisXML.address.toString() + " | " + thisXML.latency.toString();	
					arrListContents.push(dispStr);
				}
				
				// add this to list:
				arrayToDataList(arrListContents)
			}
			

			
			protected function arrayToDataList(arr:Array):void {
				var spacingsList:Array = [];
				for(var ii:int = 0; ii < arr.length; ii++){
					// This is undefined.
					trace("Value: " + arr[ii]);
					var tmpObj:Object = {value:arr[ii]};
					spacingsList.push(tmpObj);
				}
				
				dataList = new ArrayList(spacingsList);
			}
			
			protected function view1_contentCreationCompleteHandler(event:FlexEvent):void
			{
				
				var datXMLFile:File = File.applicationStorageDirectory.resolvePath("data.xml");
				if(datXMLFile.exists) {
					var stream:FileStream = new FileStream();
					stream.open( datXMLFile, FileMode.READ);
					mainDataXML = new XML(stream.readUTF());
					stream.close();	
					
					trace("XML listing or urls: " + mainDataXML.toString());
				} else {
					mainDataXML = <urlList>
									<url>
										<address>http://www.a-r-d.me</address>
										<last>200</last>
										<time>1342915872000</time>
										<latency>555 milliseconds</latency>
									</url>
								</urlList>;	
				}
				
				lblTotalCount.text = mainDataXML.url.length();
				lblCurrentCount.text = mainDataXML.url.length();
				
				updateList();
				
			}
			
			protected function view1_dataChangeHandler(event:FlexEvent):void
			{

			}
			
			protected function btnSaveList_clickHandler(event:MouseEvent):void
			{
				// save it again:
				var datXMLFile:File = File.applicationStorageDirectory.resolvePath("data.xml");
				var stream2:FileStream = new FileStream();
				stream2.open(datXMLFile, FileMode.WRITE );
				stream2.writeUTF(mainDataXML.toString());
				stream2.close();
				
				trace("Data Saved!");
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<!-- this needs to be here. Like a forced import or something. -->
		<s:ArrayList id="exampleList">
			<fx:Object value="derp'"/>
		</s:ArrayList>
		
	</fx:Declarations>
	
	
	<s:List id="lstUrlList" x="10" y="64" width="300" height="294" dataProvider="{dataList}">
		<s:itemRenderer>
			<fx:Component>
				<s:ItemRenderer height="60" styleName="line_item">
					<s:states>
						<s:State name="normal" />
						<s:State name="selected" />
						<s:State name="down" />
					</s:states>
					
					<s:Rect left="0" right="0" top="0" bottom="0">
						<s:fill>
							<s:SolidColor color="0xF9FDC0" alpha="0.1" alpha.down="0.6" alpha.selected="0"/>
						</s:fill>
					</s:Rect>
					<s:Label color="black" id="valueLabel" text="{data.value}" top="15" left="10" right="40"/>
				</s:ItemRenderer>
			</fx:Component>
		</s:itemRenderer>
	</s:List>
	
	<s:BusyIndicator id="imgBusy" x="209" y="23" visible="false"/>
	<s:Button id="btnRefreshList" x="10" y="13" width="113" label="Refresh List"
			  click="btnRefreshList_clickHandler(event)"/>
	<s:Label id="lblTotalCount" x="293" y="20" width="27" height="33" fontSize="30" text="0"
			 verticalAlign="bottom"/>
	<s:Label id="lblCurrentCount" x="257" y="25" width="27" height="33" fontSize="30" text="0"/>
	<s:Label x="277" y="23" width="17" height="33" fontSize="36" text="/"/>
	<s:Button id="btnSaveList" x="134" y="13" width="56" label="Save"
			  click="btnSaveList_clickHandler(event)"/>
</s:View>
